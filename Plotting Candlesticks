#----------------------------------------------Ploting Candlestick MT5----------------------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import mpl_finance as mpf
from mpl_finance import candlestick_ohlc
from bokeh.plotting import figure,show,output_file

path = ('C:\\Dados\\WIN@D_Daily.csv')
df = pd.read_csv(path,delimiter='\t',index_col=0)
df.head()

w = 12*60*60*1000 #half day in ms
inc = df["<CLOSE>"]>df["<OPEN>"]
dec = df["<OPEN>"]> df["<CLOSE>"]

df.index = pd.to_datetime(df.index)

TOOLS = "pan,wheel_zoom,box_zoom,reset,save"
p = figure(x_axis_type="datetime", tools= TOOLS, plot_width=1000, title="Índice Futuro Diário")
from math import pi

#p.xaxis.major_label_orientation = pi/4
#p.grid.grid_line_alpha = 0.3

p.segment(df.index,df["<HIGH>"],df.index,df["<LOW>"],color="black") #definindo a sombra do candle
p.vbar(df.index[inc],w,df["<OPEN>"][inc],df["<CLOSE>"][inc], fill_color="#1ED837",line_color="black")
p.vbar(df.index[dec],w,df["<OPEN>"][dec],df["<CLOSE>"][dec], fill_color="#F2583E",line_color="black")

output_file("candlestick.html", title="candlestick.py example")
show(p)

------------------------------------------------------Plotting Candlestick by iexfinance----------------------------------------

from iexfinance.stocks import get_historical_data
from datetime import datetime as dt

start = dt(2017,1,1) #starting date
end = dt(2018,5,13) #end date

df = get_historical_data('SPY', start=start,end=end,output_format = 'pandas')
df.head()

#importing necessary packages

import matplotlib.pyplot as plt
import mpl_finance as mpf
from mpl_finance import candlestick_ohlc
from bokeh.plotting import figure,show,output_file

import pandas as pd

w = 12*60*60*1000 #half day in ms
df.index = pd.to_datetime(df.index)

#Variables to identify if the candlestick r green or red
inc = df.close > df.open
dec = df.open > df.close

# The various 'interactions' we want in our candlestick graph. This is an argument to be passed in figure () from bokeh.plotting
TOOLS = "pan,wheel_zoom,box_zoom,reset,save"
# Pan: It helps you pan/move the plot
# Wheel Zoom: You can zoom in using the wheel of your mouse
# Box Zoom: You can zoom in by creating a box on the specific area of the plot. Use the mouse, click and drag to create the box
# Reset: If you want to reset the visualisation of the plot
# Save: Saving the plot (entire or the part which you want) as an image file

# Passing the arguments of our bokeh plot

p = figure(x_axis_type="datetime", tools= TOOLS, plot_width=1000, title="Visualizar")
from math import pi

# The orientation of major tick labels can be controlled with the major_label_orientation property.
# This property accepts the values "horizontal" or "vertical" or a floating point number that gives
# the angle (in radians) to rotate from the horizontal.

p.xaxis.major_label_orientation = pi/4

# Alpha signifies the floating point between 0 (transparent) and 1 (opaque).
# The line specifies the alpha for the grid lines in the plot.
p.grid.grid_line_alpha = 0.3

# Configure and add segment glyphs to the figure
p.segment(df.index,df.high,df.index,df.low,color="red")
# Adds vbar glyphs to the Figure
p.vbar(df.index[inc],w,df.open[inc],df.close[inc], fill_color="#1ED837",line_color="black")
p.vbar(df.index[dec],w,df.open[dec],df.close[dec], fill_color="#F2583E",line_color="black")

# Generates simple standalone HTML documents for Bokeh visualization
output_file("candlestick.html", title="candlestick.py example")
show(p)
