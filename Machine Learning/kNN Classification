#importando as bibliotecas
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn import neighbors, datasets

#número de vizinhos
n_neighbors = 15

#importando a data
iris = datasets.load_iris()
#utilizando somente as 2 primeiras colunas, usando um dataset com 2 dimensões

X = iris.data[:, :2]
y = iris.target
h = .02 #tamanho do passo

#criando mapas de cor

cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])
cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])

for weights in ['uniform', 'distance']:
    #iremos criar uma instância de classificação de vizinhos e treinar os dados
    
    clf = neighbors.KNeighborsClassifier(n_neighbors,weights=weights)
    clf.fit(X,y)
    
#plotar o limite de decisão, para isso vamos atribuir uma cor para cada ponto. [x_min, x_max] x [y_min,y_max]
x_min, x_max = X[:,0].min() - 1, X [:,0].max() + 1
y_min, y_max = X[:,1].min() - 1, X [:,1].max() + 1

xx , yy = np.meshgrid(np.arange(x_min,x_max,h),
                     np.arange(y_min,y_max,h))

Z = clf.predict(np.c_[xx.ravel(),yy.ravel()])

#plotando os resultados

Z = Z.reshape(xx.shape)
plt.figure()
plt.pcolormesh(xx,yy,Z,cmap=cmap_light)

#plotando os pontos de treinamento

plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold)
plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())
plt.title("3-Class classification (k = %i, weights = '%s')"
 % (n_neighbors, weights))
plt.show()
