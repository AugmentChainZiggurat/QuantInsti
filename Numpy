import numpy as np

stock_values = [20.3,25.3,19.0,18.5,21.2,24.5,26.6,23.2,21.2] #this is a list

#convert list into array

SV = np.array(stock_values)
print(SV)

#---------------------------------------------arange------------------------------------------------------------

#arange ([start], [stop], [step], [dtype=None]) 


# se o parâmetro de start não for preenchido,o mesmo se inicia em 0
#the default interval for a step is '1'
# if de dtype is not given, then it will be automatically inferred from the other input arguments

a = np.arange (10) #syntax a = np.arange (0,10,1,None)
print (a)

b = np.arange (1,15)
print (b)

c = np.arange(0,21,2)
print (c)

d = np.arange(1.3,23.3,2.1,int)
print (d)

e = np.arange (1.4,23.6,1, float)
print (e)

#--------------------------------------------linspace-------------------------------------------------------

#linspace(start, stop, num=50, endpoint=True, retstep=False)

#por padrão, quando o 'num' não for especificado ,o mesmo retornará 50 valores

a = np.linspace (1,10)
print (a)

#Range de 1 - 10 e dividir em 8 individual array elements
b = np.linspace (1,10,8)
print (b)

#False para não incluir o ponto final do range
c = np.linspace (1,10,8,False)
print (c)

d = np.linspace (1,10,8,True,True)
print (d)

#-------------------------------------Dimensionality of Arrays-----------------------------------------------

#Creating a 'scalar'
a = np.array(50) #should have only 1 element, at the maximiu
print ("a:", a)

#to know the datatype of the array
print("The Datatype of array 'a' is: ", a.dtype)

#combining it all together
scalar_array = np.array("one_element")
print (scalar_array, np.ndim (scalar_array), scalar_array.dtype)

#-------------------------------------One Dimensional Arrays-----------------------------------------------------


a = np.array([1,1,2,3,5,8,13,21]) #fibonnacci series
b = np.array([4.4,6.6,8.8,10.1,12.12])

print ("a: ", a)
print ("b: ", b)

print ("Type of 'a': ", a.dtype)
print ("Type of 'b': ", b.dtype)

print("The Dimension of 'a': ", np.ndim(a))
print("The Dimension of 'b': ", np.ndim(b))

#-------------------------------------Two Dimensional Arrays-----------------------------------------------------

two_d_array = np.array([[1.1,1.2,1.3],[2.1,2.2,2.3],[3.1,3.2,3.3]])
print (two_d_array)
print ("Dimension of 'two_d_array' is: ", np.ndim(two_d_array))

studentdata = np.array ([["Name","Year","Marks"],
                         ["Bela",2014,78.2],["Joe",1987,59.1],
                         ["Sugar",1990,70]])
print(studentdata)
print("Dimension of studentdata is: ", np.ndim(studentdata))

import pandas as pd
import numpy as np

studentdata1 = {"Name":["Bela","Joe","Sugar"],
                "Year":[2014,1987,1990],
                "Marks":[78.2,59.1,70]
               }

df = pd.DataFrame(studentdata1)
print (df)
print (np.mean(df.Marks))

#The elements of the 2D arrays are stored as 'rows' and 'columns'

a = np.array([[1.8,2.4,5.3,8.2],
             [7.8,5.1,9.2,17.13],
             [6.1,-2.13,-6.3,-9.1]])

print (a)
print ("The Dimension of 'a' is: ", np.ndim(a))

# A 3D array is 'array of arrays'. Have a quick look at it

b = np.array([[[111,222],[333,444]],
             [[121,212],[221,222]],
             [[555,560],[565,570]] ])

print (b)
print ("Dimension of 'b': ", np.ndim (b))

#------------------------------------------------Shape of an array-------------------------------------------------------

a = np.array([[11, 22, 33],
              [12, 24, 36],
              [13, 26, 39],
              [14, 28, 42],
              [15, 30, 45],
              [16, 32, 48]])
print (a)
print (a.shape)

a.shape = (9,2)
print (a)



