#--------------------------------------------Lifo - Last in First Out---------------------------------------------------

# Bottom --> 10, 20, 30, 40, 50, 60 ---> Top
my_stack = [10,20,30,40,50] #list
my_stack.append (60) #the Push operation
print (my_stack)

my_stack.pop() #The POP Operation
my_stack.pop() #The same operation
print (my_stack) #from the top, 50 and 60 will be removed

#---------------------------------------FIFO - First in First Out---------------------------------------------------------

#collections is a package which contains high performance container datatyes
# 'deque' is a list-like container with fast appends and pops on either ends

from collections import deque
#this is your queue. "Roger Federer" is the first do arrive while "Novak Djokovic" is the last.
my_queue = deque(["Roger Federer","Rafael Nadal", "Novak Djokovic"])
my_queue.append ("Andre Agassi") # Now Andre Agassi arrives
my_queue.append ("Pete Sampras") # Now Pete Sampras Arrives
print(my_queue) # you may have a look at the queue below

my_queue.popleft() #remove and print the first arrived
my_queue.popleft() #remove and print the first arrived
print (my_queue)

#-------------------------------------------------------GRAPHs--------------------------------------------------------------
#This is an example of an Undirected Graph, where A, B, C, D and E are the various nodes. The following list shows that these five nodes are connected to which other nodes. For diagram, you may refer to the graph, taught in the video lecture.
#A <---> B,C 
#B <---> A,C,D 
#C <---> A,B,D,E 
#D <---> B,C,E 
#E <---> D,C

# Please Note: At present we are using dictionaries, functions and loops which have not been taught.
# We will take up all of these concepts in the upcoming units or sections of this course.
# The following code is just to display all the different edges of the graph, as shown in the video lecture.
my_graph = {'A' : ['B','C'], 'B' : ['A','C','D'], 'C' : ['A','B','D','E'], 'D' : ['B','C','E'], 'E' : ['D','C']}

def define_edges(my_graph):
    edges = []
    for nodes in my_graph:
        for adjacent_nodes in my_graph [nodes]:
            edges.append((nodes, adjacent_nodes))
    return edges

print(define_edges(my_graph))
